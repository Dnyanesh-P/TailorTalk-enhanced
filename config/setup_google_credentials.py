"""
Google Credentials Setup Script for TailorTalk Enhanced
Helps users configure Google Cloud credentials for OAuth2 authentication
"""
import os
import json
import logging
from pathlib import Path
from typing import Dict, Any

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_directories():
    """Create necessary directories"""
    directories = ['config', 'auth_data', 'logs']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        logger.info(f"‚úÖ Directory created/verified: {directory}")

def validate_credentials_file(credentials_path: str) -> bool:
    """Validate Google credentials file"""
    try:
        if not os.path.exists(credentials_path):
            logger.error(f"‚ùå Credentials file not found: {credentials_path}")
            return False
        
        with open(credentials_path, 'r') as f:
            credentials = json.load(f)
        
        # Check required fields
        required_fields = ['client_id', 'client_secret', 'auth_uri', 'token_uri']
        
        if 'web' in credentials:
            creds_data = credentials['web']
        elif 'installed' in credentials:
            creds_data = credentials['installed']
        else:
            logger.error("‚ùå Invalid credentials format")
            return False
        
        missing_fields = [field for field in required_fields if field not in creds_data]
        
        if missing_fields:
            logger.error(f"‚ùå Missing required fields: {missing_fields}")
            return False
        
        logger.info("‚úÖ Credentials file is valid")
        return True
        
    except json.JSONDecodeError:
        logger.error("‚ùå Invalid JSON in credentials file")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error validating credentials: {e}")
        return False

def setup_environment_variables():
    """Setup environment variables"""
    env_vars = {
        'GOOGLE_CREDENTIALS_PATH': 'config/credentials.json',
        'ENCRYPTION_PASSWORD': 'tailortalk-secure-key-2024',
        'HOST': 'localhost',
        'PORT': '8001',
        'DEBUG': 'false'
    }
    
    env_file = Path('.env')
    
    # Read existing .env file if it exists
    existing_vars = {}
    if env_file.exists():
        with open(env_file, 'r') as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    existing_vars[key] = value
    
    # Update with new variables
    existing_vars.update(env_vars)
    
    # Write .env file
    with open(env_file, 'w') as f:
        f.write("# TailorTalk Enhanced Environment Variables\n")
        f.write("# Generated by setup_google_credentials.py\n\n")
        
        for key, value in existing_vars.items():
            f.write(f"{key}={value}\n")
    
    logger.info("‚úÖ Environment variables configured in .env file")

def create_sample_credentials():
    """Create a sample credentials file for reference"""
    sample_credentials = {
        "web": {
            "client_id": "YOUR_CLIENT_ID.apps.googleusercontent.com",
            "project_id": "your-project-id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_secret": "YOUR_CLIENT_SECRET",
            "redirect_uris": [
                "http://localhost:8001/auth/callback"
            ]
        }
    }
    
    sample_path = Path('config/credentials_sample.json')
    
    with open(sample_path, 'w') as f:
        json.dump(sample_credentials, f, indent=2)
    
    logger.info(f"‚úÖ Sample credentials file created: {sample_path}")

def print_setup_instructions():
    """Print detailed setup instructions"""
    instructions = """
üîß GOOGLE CLOUD SETUP INSTRUCTIONS
==================================

1. CREATE GOOGLE CLOUD PROJECT
   ‚Ä¢ Go to: https://console.cloud.google.com/
   ‚Ä¢ Create a new project or select existing one
   ‚Ä¢ Note your project ID

2. ENABLE GOOGLE CALENDAR API
   ‚Ä¢ Go to: APIs & Services > Library
   ‚Ä¢ Search for "Google Calendar API"
   ‚Ä¢ Click "Enable"

3. CONFIGURE OAUTH CONSENT SCREEN
   ‚Ä¢ Go to: APIs & Services > OAuth consent screen
   ‚Ä¢ Choose "External" user type
   ‚Ä¢ Fill in required information:
     - App name: TailorTalk Enhanced
     - User support email: your-email@example.com
     - Developer contact: your-email@example.com
   ‚Ä¢ Add scopes:
     - https://www.googleapis.com/auth/calendar
     - https://www.googleapis.com/auth/userinfo.email
     - https://www.googleapis.com/auth/userinfo.profile
   ‚Ä¢ Add test users (your email addresses)

4. CREATE OAUTH2 CREDENTIALS
   ‚Ä¢ Go to: APIs & Services > Credentials
   ‚Ä¢ Click "Create Credentials" > "OAuth 2.0 Client IDs"
   ‚Ä¢ Application type: "Web application"
   ‚Ä¢ Name: "TailorTalk Enhanced"
   ‚Ä¢ Authorized redirect URIs:
     - http://localhost:8001/auth/callback
     - http://127.0.0.1:8001/auth/callback
   ‚Ä¢ Click "Create"

5. DOWNLOAD CREDENTIALS
   ‚Ä¢ Click the download button for your OAuth 2.0 Client
   ‚Ä¢ Save as: config/credentials.json
   ‚Ä¢ DO NOT commit this file to version control!

6. TEST SETUP
   ‚Ä¢ Run: python config/setup_google_credentials.py
   ‚Ä¢ Start the application: python main1.py
   ‚Ä¢ Visit: http://localhost:8001
   ‚Ä¢ Test authentication flow

üìã IMPORTANT NOTES
==================
‚Ä¢ Keep credentials.json secure and private
‚Ä¢ Add config/credentials.json to .gitignore
‚Ä¢ For production, use environment variables
‚Ä¢ Test users must be added in OAuth consent screen
‚Ä¢ Quota limits apply - monitor usage in Google Cloud Console

üîó HELPFUL LINKS
=================
‚Ä¢ Google Cloud Console: https://console.cloud.google.com/
‚Ä¢ Calendar API Docs: https://developers.google.com/calendar/api
‚Ä¢ OAuth2 Guide: https://developers.google.com/identity/protocols/oauth2
‚Ä¢ Scopes Reference: https://developers.google.com/identity/protocols/oauth2/scopes

"""
    
    print(instructions)

def main():
    """Main setup function"""
    print("üöÄ TailorTalk Enhanced - Google Credentials Setup")
    print("=" * 50)
    
    # Create directories
    create_directories()
    
    # Setup environment variables
    setup_environment_variables()
    
    # Create sample credentials file
    create_sample_credentials()
    
    # Check if credentials file exists
    credentials_path = 'config/credentials.json'
    
    if os.path.exists(credentials_path):
        print(f"\nüìÅ Found credentials file: {credentials_path}")
        
        if validate_credentials_file(credentials_path):
            print("‚úÖ Setup completed successfully!")
            print("\nüéØ Next steps:")
            print("1. Start the FastAPI server: python main1.py")
            print("2. Start the Streamlit app: streamlit run enhanced_streamlit_app.py")
            print("3. Visit: http://localhost:8501")
        else:
            print("‚ùå Credentials file is invalid. Please check the format.")
            print_setup_instructions()
    else:
        print(f"\n‚ö†Ô∏è  Credentials file not found: {credentials_path}")
        print("Please follow the setup instructions below:")
        print_setup_instructions()
    
    print("\n" + "=" * 50)
    print("Setup script completed!")

if __name__ == "__main__":
    main()
